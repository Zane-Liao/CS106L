Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Unique Pointer
--------------

Q1. List one or two benefits of using RAII to manage memory instead manually calling `new` and `delete`.
A1. No need to necessary manager memory to avoid forgetting to delete and 
causing memory leak.

Q2. When implementing move semantics for a `unique_ptr`, for example in the 
move constructor `unique_ptr(unique_ptr&& other)`, it is essential that we 
set the underlying pointer of the `other` parameter to `nullptr` before 
exiting the function. Explain in your own words what problem would arise 
if we did not.
A2. two pointer -> same one address.

Q3. This method of recursive deallocation through RAII works great for 
small lists, but may pose a problem for longer lists. Why? Hint: 
what is the limit for how "deep" a recursive function's call stack can grow?
A3. windows~1MB linux~8MB macos~8MB

Q4. What does `std::move` do in this context? Why is it safe to 
use `std::move` and move semantics here?
A4. use std::move -> Object not to use copy, Instead 'move'.